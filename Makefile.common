DEPS_DIR          = $(CORE_DIR)/deps
LIBRETRO_COMM_DIR = $(CORE_DIR)/libretro-common

INCFLAGS    := -I$(CORE_DIR)/libretro \
					-I$(CORE_DIR) \
					-I$(DEPS_DIR) \
					-I$(LIBRETRO_COMM_DIR)/include 

SOURCES_C   :=
SOURCES_CXX := \
					$(CORE_DIR)/hw/arm7/arm7.cpp \
					\
					$(CORE_DIR)/hw/aica/dsp.cpp \
					$(CORE_DIR)/hw/aica/aica.cpp \
					\
					$(CORE_DIR)/hw/holly/holly.cpp \
					\
					$(CORE_DIR)/hw/gdrom/gdrom_response.cpp \
					$(CORE_DIR)/hw/gdrom/gdromv3.cpp \
					\
					$(CORE_DIR)/hw/maple/maple_helper.cpp \
					$(CORE_DIR)/hw/maple/maple_devs.cpp \
					$(CORE_DIR)/hw/maple/maple_if.cpp \
					$(CORE_DIR)/hw/maple/maple_cfg.cpp \
					\
					$(CORE_DIR)/hw/mem/_vmem.cpp \
					\
					$(CORE_DIR)/hw/pvr/pvr.cpp \
					$(CORE_DIR)/hw/pvr/ta.cpp \
					$(CORE_DIR)/hw/pvr/tr.cpp \
					\
					$(CORE_DIR)/hw/sh4/sh4_mmr.cpp \
					$(CORE_DIR)/hw/sh4/sh4_mem.cpp \
					$(CORE_DIR)/hw/sh4/sh4_interrupts.cpp \
					$(CORE_DIR)/hw/sh4/sh4_rom.cpp \
					$(CORE_DIR)/hw/sh4/sh4_core_regs.cpp \
					$(CORE_DIR)/hw/sh4/sh4_sched.cpp \
					$(CORE_DIR)/hw/sh4/sh4_opcode_list.cpp \
					$(CORE_DIR)/hw/sh4/interpr/sh4_interpreter.cpp \
					$(CORE_DIR)/hw/sh4/interpr/sh4_fpu.cpp \
					$(CORE_DIR)/hw/sh4/interpr/sh4_opcodes.cpp \
					$(CORE_DIR)/hw/sh4/modules/serial.cpp \
					$(CORE_DIR)/hw/sh4/modules/rtc.cpp  \
					$(CORE_DIR)/hw/sh4/modules/bsc.cpp \
					$(CORE_DIR)/hw/sh4/modules/tmu.cpp \
					$(CORE_DIR)/hw/sh4/modules/ccn.cpp \
					$(CORE_DIR)/hw/sh4/modules/intc.cpp \
					$(CORE_DIR)/hw/sh4/modules/ubc.cpp \
					$(CORE_DIR)/hw/sh4/modules/cpg.cpp \
					$(CORE_DIR)/hw/sh4/modules/dmac.cpp \
					$(CORE_DIR)/hw/sh4/modules/mmu.cpp \
					$(CORE_DIR)/imgread/ImgReader.cpp \
					$(CORE_DIR)/imgread/cdi.cpp \
					$(CORE_DIR)/imgread/chd.cpp \
					$(CORE_DIR)/imgread/common.cpp \
					$(CORE_DIR)/imgread/gdi.cpp \
					\
					$(CORE_DIR)/nullDC.cpp \
					$(CORE_DIR)/stdclass.cpp \
					\
					$(DEPS_DIR)/coreio/coreio.cpp \
					$(DEPS_DIR)/chdr/chdr.cpp \
					$(DEPS_DIR)/crypto/sha1.cpp \
					$(DEPS_DIR)/crypto/sha256.cpp \
					$(DEPS_DIR)/crypto/md5.cpp \
					$(DEPS_DIR)/libelf/elf.cpp \
					$(DEPS_DIR)/libelf/elf32.cpp \
					$(DEPS_DIR)/libelf/elf64.cpp \
					$(DEPS_DIR)/chdpsr/cdipsr.cpp \
					\
					\
					$(CORE_DIR)/reios/reios_elf.cpp \
					$(CORE_DIR)/reios/reios.cpp \
					$(CORE_DIR)/reios/gdrom_hle.cpp \
					$(CORE_DIR)/reios/descrambl.cpp
SOURCES_ASM :=

ifeq ($(NO_REND), 1)
SOURCES_CXX += $(CORE_DIR)/rend/norend/norend.cpp
endif

ifeq ($(HAVE_GL), 1)
SOURCES_CXX += $(CORE_DIR)/rend/gles/gl_backend.cpp
SOURCES_C   += $(LIBRETRO_COMM_DIR)/glsym/rglgen.c \
					$(LIBRETRO_COMM_DIR)/glsm/glsm.c
ifeq ($(GLES), 1)
	SOURCES_C += $(LIBRETRO_COMM_DIR)/glsym/glsym_es2.c
else
	SOURCES_C += $(LIBRETRO_COMM_DIR)/glsym/glsym_gl.c
endif
endif

ifeq ($(NAOMI), 1)
SOURCES_CXX += $(CORE_DIR)/hw/naomi/naomi.cpp \
					$(CORE_DIR)/hw/naomi/naomi_cart.cpp 
endif



ifeq ($(HAVE_GENERIC_JIT),1)
DYNAREC_USED = 1
SOURCES_CXX += $(CORE_DIR)/rec-cpp/rec_cpp.cpp
endif

# Recompiler (x64)

ifeq ($(WITH_DYNAREC), $(filter $(WITH_DYNAREC), x86_64 x64))
DYNAREC_USED = 1
SOURCES_CXX += $(CORE_DIR)/rec-x64/rec_x64.cpp 
# Recompiler (x86 32bit)
#
else ifeq ($(WITH_DYNAREC), $(filter $(WITH_DYNAREC), i386 i686 x86))
DYNAREC_USED = 1
ifeq ($(platform), unix)
SOURCES_ASM += $(CORE_DIR)/rec-x86/rec_lin86_asm.S
else
SOURCES_ASM += $(CORE_DIR)/rec-x86/rec_win86_asm.S
endif
SOURCES_CXX += $(CORE_DIR)/rec-x86/rec_x86_asm.cpp \
					$(CORE_DIR)/rec-x86/rec_x86_driver.cpp \
					$(CORE_DIR)/rec-x86/rec_x86_il.cpp \
					$(CORE_DIR)/rec-x86/x86_emitter.cpp
endif


# Recompiler (ARM)
ifeq ($(WITH_DYNAREC), arm)
DYNAREC_USED = 1
SOURCES_CXX += $(CORE_DIR)/rec-ARM/rec_arm.cpp
endif

ifeq ($(DYNAREC_USED),1)
SOURCES_CXX += $(CORE_DIR)/rec.cpp
# Dynarec
SOURCES_CXX += $(CORE_DIR)/hw/sh4/dyna/decoder.cpp \
					$(CORE_DIR)/hw/sh4/dyna/driver.cpp \
					$(CORE_DIR)/hw/sh4/dyna/blockmanager.cpp \
					$(CORE_DIR)/hw/sh4/dyna/shil.cpp 

endif

ifneq (,$(findstring arm, $(ARCH)))
SOURCES_ASM += $(CORE_DIR)/rec-ARM/ngen_arm.S
endif

SOURCES_CXX += $(CORE_DIR)/libretro/libretro.cpp \
					$(CORE_DIR)/libretro/common.cpp

SOURCES_C +=   $(LIBRETRO_COMM_DIR)/memmap/memalign.c \
					$(LIBRETRO_COMM_DIR)/file/retro_stat.c

ifeq ($(NO_THREADS),1)
else
SOURCES_C += $(LIBRETRO_COMM_DIR)/rthreads/rthreads.c
endif

SOURCES_C +=   $(DEPS_DIR)/zlib/deflate.c \
					$(DEPS_DIR)/zlib/gzlib.c \
					$(DEPS_DIR)/zlib/uncompr.c \
					$(DEPS_DIR)/zlib/zutil.c \
					$(DEPS_DIR)/zlib/inffast.c \
					$(DEPS_DIR)/zlib/gzread.c \
					$(DEPS_DIR)/zlib/crc32.c \
					$(DEPS_DIR)/zlib/gzwrite.c \
					$(DEPS_DIR)/zlib/inflate.c \
					$(DEPS_DIR)/zlib/infback.c \
					$(DEPS_DIR)/zlib/inftrees.c \
					$(DEPS_DIR)/zlib/trees.c \
					$(DEPS_DIR)/zlib/gzclose.c \
					$(DEPS_DIR)/zlib/compress.c \
					$(DEPS_DIR)/zlib/adler32.c
